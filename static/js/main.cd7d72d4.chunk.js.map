{"version":3,"sources":["Cell.js","BoardForm.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","coord","classes","isLit","react_default","a","createElement","className","onClick","Component","BoardForm","state","rows","cols","handleSubmit","handleChange","preventDefault","changeBoard","setState","defineProperty","target","name","value","onSubmit","htmlFor","onChange","type","id","Board","nrows","ncols","hasWon","board","createBoard","flipCellsAround","i","row","j","concat","push","src_Cell_0","key","Math","random","chanceLightStartsOn","_this$props","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","y","x","flipCell","every","cell","parseInt","src_BoardForm_0","showBoard","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cd7d72d4.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe(this.props.coord);\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, { Component } from 'react';\r\nimport './BoardForm.css'\r\n\r\nclass BoardForm extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            rows: \"\",\r\n            cols: \"\"\r\n        }\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleSubmit(evt){\r\n        evt.preventDefault();\r\n        this.props.changeBoard(this.state.rows, this.state.cols)\r\n        this.setState({rows: \"\", cols: \"\"})\r\n    }\r\n\r\n    handleChange(evt){\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className='BoardForm' >\r\n                <form onSubmit={this.handleSubmit} className='BoardForm-form'>\r\n                    <label htmlFor='rows' >Rows: </label>\r\n                    <input onChange={this.handleChange} type='text' id='rows' name='rows' value={this.state.rows} />\r\n\r\n                    <label htmlFor='cols' >Columns: </label>\r\n                    <input onChange={this.handleChange} type='text' id='cols' name='cols' value={this.state.cols} />\r\n\r\n                    <button>Select</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BoardForm;","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\nimport BoardForm from \"./BoardForm\";\n\nclass Board extends Component {\n\n  static defaultProps = {\n    nrows: 3,\n    ncols: 3,\n    chanceLightStartsOn: 0.5\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      nrows: 3,\n      ncols: 3,\n      hasWon: false,\n      board: this.createBoard(this.props.nrows, this.props.ncols),\n    }\n    this.flipCellsAround = this.flipCellsAround.bind(this);\n    this.changeBoard = this.changeBoard.bind(this);\n  }\n\n  showBoard() {\n    let board = [];\n    \n    for(let i = 0; i < this.state.nrows; i++){\n      let row = []\n      for(let j = 0; j < this.state.ncols; j++){\n        let coord = `${i}-${j}`;\n        row.push(<Cell key={ coord } isLit={ this.state.board[i][j] } flipCellsAroundMe={ this.flipCellsAround } coord={ coord } />);\n      }\n      board.push(<tr key={i} >{row}</tr>)\n    }\n    \n    return board\n  }\n\n\n  createBoard(rows, cols) {\n    let board = [];\n    \n    for(let i = 0; i < rows; i++){\n      let row = []\n      for(let j = 0; j < cols; j++){\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n      board.push(row)\n    }\n    \n    return board\n  }\n\n\n  /** handle changing a cell: update board */\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // flip this cell and the cells around it\n    flipCell(y, x)\n    flipCell(y + 1, x)\n    flipCell(y - 1, x)\n    flipCell(y, x + 1)\n    flipCell(y, x - 1)\n\n    // determine if winner\n    let hasWon = board.every(row => row.every(cell => !cell))\n\n    this.setState({board,\n                  hasWon\n                });\n  }\n\n  changeBoard(rows, cols){\n    this.setState({\n      nrows: parseInt(rows),\n      ncols: parseInt(cols),\n      hasWon: false,\n      board: this.createBoard(rows, cols)\n    })\n  }\n\n\n  render() {\n\n    return(\n      <div className=\"Board\" >\n        {\n          this.state.hasWon ?\n            <div><h1>You Win!</h1><BoardForm changeBoard={this.changeBoard} /></div> :\n            <table className=\"Board Board-shadow\"><tbody>{this.showBoard()}</tbody></table>\n        }\n      </div>\n    )\n  }\n}\n\n\nexport default Board;","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}